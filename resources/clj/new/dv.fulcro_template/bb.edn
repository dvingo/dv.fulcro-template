{:paths ["scripts"]
 :min-bb-version "0.4.0"
 :tasks {:requires ([babashka.process :as p :refer [process]]
                    [babashka.fs :as fs]
                    [clojure.string :as str])
         yarn-install
         (do (println "Executing: yarn install")
             (shell "yarn"))

         be-run
         {:task
          (shell {:dir "deploy" :extra-env {"PORT" "9898"}}
            (let [jar-file "server.jar"
                  entry-ns "{{namespace}}.server.server-entry"]
              (str "java -cp " jar-file " clojure.main -m " entry-ns)))
          :doc "Executes the production server.jar"}

         be-release
         {:doc "Creates a Java Jar for the Clojure backend"
          :task
          (let [server-jar-file (str "server" ".jar")]
            (println "Creating be jar.")
            (shell (str "clojure -A:depstar -m hf.depstar.uberjar deploy/" server-jar-file)))}

         fe-release
         {:depends [yarn-install]
          :doc     "Creates release builds for the ClojureScript code via shadow-cljs"
          :task    (shell "yarn shadow-cljs release main")}

         release
         {:depends [fe-release be-release]
          :doc     "Creates the cljs release and then the be release"
          :task    (println "--------------------------------------------------------------------------------\nCreated full release.")}

         fe-test
         {:depends [yarn-install]
          :doc     "Runs the frontend tests via karma."
          :task
          (do
            (shell "yarn shadow-cljs compile ci-tests")
            (shell "yarn karma start --single-run"))}

         fe-report
         {:depends [yarn-install]
          :doc     "Creates a shadow-cljs html report at fe-bundle-report.html"
          :task
          (shell "yarn shadow-cljs run shadow.cljs.build-report main fe-bundle-report.html")}

         fe
         {:depends [yarn-install]
          :doc     "Starts a shadow-cljs watch on main"
          :task    (let [aliases []
                         builds ["main"
                                 {{#workspaces}}"workspaces"{{/workspaces}}
                                 {{#devcards}}"devcards"{{/devcards}}
                                 {{#storybook}}"storybook"{{/storybook}}
                                 ]]
                     (shell
                       (cond-> (str "yarn run shadow-cljs watch " (str/join " " build-name))
                         (seq aliases)
                         (str " -A" (str/join aliases))))
                     (println "STARTING FE"))}

         clean
         {:doc "Removes deploy and builds dirs and recreates them"
          :task
          ;; todo change this to clear only the server jar and xtdb dir in deploy dir
          ;; when they exist
          (let [jars (fs/glob "deploy" "*.jar")]
            (when (seq jars)
              (println "Removing jars: " (str/join ", " (map (fn [x] (str "'" x "'")) jars)))
              (run! fs/delete jars))
            (fs/delete-if-exists "builds"))}

         {{#storybook?}}
         storybook
         {:depends [yarn-install]
          :doc     "Starts the storybook build process"
          :task    (shell "yarn run start-storybook -p 6006 --ci --debug-webpack  --webpack-stats-json storybook-debug-output")}

         build-storybook
         {:depends [yarn-install]
          :doc     "Creates static assets for serving the storybook"
          :task    (shell "time yarn run build-storybook")}{{/storybook?}}}}
